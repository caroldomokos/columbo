#!/bin/bash
# short intro
# source http://www.cyberciti.biz/tips/linux-unix-pause-command.html
read -p "This script will install openstack basic components (keystone,nova,neutron,glance) on a single host. Juno, ubuntu trusty, etc To be completed.U need to run it as root/sudo Press enter to continue"
# we start by collecting the necessary data to build the system
echo "We start by collecting the necessary data to build the system"
#get the ip address on eth0
# source http://stackoverflow.com/questions/21336126/linux-bash-script-to-extract-ip-address
ip_address=`ifconfig eth0 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`
echo "The hostname you want to use:"
read host_name
# overite the /etc/hostname with the new value
sudo bash -c "cat > /etc/hostname" <<EOF
$host_name
EOF
# overwrite /etc/hosts with the new value for our hostname and  fixed ip - not pointing to 127.0.0.1
sudo bash -c "cat > /etc/hosts" <<EOF
$ip_address     $host_name
EOF
#let's update the system
echo "Let's update the system"
# add the ubuntu cloud ring support for juno
echo "deb http://ubuntu-cloud.archive.canonical.com/ubuntu" \
  "trusty-updates/juno main" > /etc/apt/sources.list.d/cloudarchive-juno.list
apt-get update && apt-get -y install ubuntu-cloud-keyring && apt-get dist-upgrade -y
#install mariadb with password
# source http://dba.stackexchange.com/questions/35866/install-mariadb-without-password-prompt-in-ubuntu
#	http://stackoverflow.com/questions/4937792/using-variables-inside-a-bash-heredoc
echo "Enter the master password to be used for all components (database, rabbitmq, services, etc..)"
read master_pass
export DEBIAN_FRONTEND=noninteractive
debconf-set-selections -v <<EOF
mariadb-server-5.5 mysql-server/root_password password $master_pass
EOF
debconf-set-selections -v <<EOF
mariadb-server-5.5 mysql-server/root_password_again password $master_pass
EOF
apt-get install mariadb-server python-mysqldb -y
# create  loop to configure all datatbases
# source http://www.tldp.org/LDP/abs/html/loops1.html
#	http://www.bluepiccadilly.com/2011/12/creating-mysql-database-and-user-command-line-and-bash-script-automate-process
for db_and_user_name in "keystone" "glance" "nova" "neutron"
do
mysql -uroot -p$master_pass -e "create database if not exists $db_and_user_name;"
mysql -uroot -p$master_pass -e "GRANT ALL PRIVILEGES ON db_and_user_name.* TO db_and_user_name@$localhost IDENTIFIED BY '$master_pass';"
mysql -uroot -p$master_pass -e "GRANT ALL PRIVILEGES ON db_and_user_name.* TO db_and_user_name@'%' IDENTIFIED BY '$master_pass';"
mysql -uroot -p$master_pass -e "FLUSH PRIVILEGES;"
done
# install rabbit mq
apt-get install rabbitmq-server -y
# change guest password
rabbitmqctl change_password guest $master_pass
# install the openstack packages
apt-get install keystone python-keystoneclient glance python-glanceclient nova-api nova-cert nova-conductor nova-consoleauth nova-novncproxy nova-scheduler python-novaclient  nova-compute sysfsutils neutron-server neutron-plugin-ml2 python-neutronclient neutron-plugin-openvswitch-agent neutron-l3-agent neutron-dhcp-agent -y
##############starting keystone###############
# overwrite the keystone config file
sudo bash -c "cat > /etc/keystone/keystone.conf" <<EOF
[DEFAULT]
admin_token=$master_pass
admin_bind_host=$ip_address
verbose=true
log_dir=/var/log/keystone
[assignment]
[auth]
[cache]
[catalog]
[credential]
[database]
connection=mysql://keystone:$master_pass@$host_name/keystone
[ec2]
[endpoint_filter]
[federation]
[identity]
[kvs]
[ldap]
[matchmaker_ring]
[memcache]
[oauth1]
[os_inherit]
[paste_deploy]
[policy]
[revoke]
driver = keystone.contrib.revoke.backends.sql.Revoke
[signing]
[ssl]
[stats]
[token]
provider=keystone.token.providers.uuid.Provider
driver=keystone.token.backends.sql.Token
[trust]
[extra_headers]
Distribution = Ubuntu
EOF
#
# populate the keystone database with tables
su -s /bin/sh -c "keystone-manage db_sync" keystone
###Restart the Identity service:
service keystone restart
##By default, the Ubuntu packages create a SQLite database.
#Because this configuration uses a SQL database server, you can remove the SQLite database file:
rm -f /var/lib/keystone/keystone.db
#By default, the Identity service stores expired tokens in the database indefinitely.
#The accumulation of expired tokens considerably increases the database size and might degrade service performance,
#particularly in environments with limited resources.
#We recommend that you use cron to configure a periodic task that purges expired tokens hourly:
(crontab -l -u keystone 2>&1 | grep -q token_flush) || \
  echo '@hourly /usr/bin/keystone-manage token_flush >/var/log/keystone/keystone-tokenflush.log 2>&1' \
  >> /var/spool/cron/crontabs/keystone
#####Create tenants, users, and roles
# use the token and keystone endpoint for initial config as there is no admin user yet
export OS_SERVICE_TOKEN=$master_pass
export OS_SERVICE_ENDPOINT=http://$host_name:35357/v2.0
# create admin tenant
keystone tenant-create --name admin --description "Admin Tenant"
# create admin user
keystone user-create --name admin --pass $master_pass
#Create the admin role
keystone role-create --name admin
#Add the admin role to the admin tenant and user
keystone user-role-add --user admin --tenant admin --role admin
#Create the service tenant. This is the tenant under which we have all services
keystone tenant-create --name service --description "Service Tenant"
#Create the service entity for the Identity service
keystone service-create --name keystone --type identity --description "OpenStack Identity"
#OpenStack provides three API endpoint variations for each service: admin, internal, and public. In a production environment,
#the variants might reside on separate networks that service different types of users for security reasons. Also, OpenStack
#supports multiple regions for scalability. For simplicity, this configuration uses the management network for all endpoint
#variations and the regionOne region.
#Create the Identity service API endpoints:
keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ identity / {print $2}') \
  --publicurl http://$host_name:5000/v2.0 \
  --internalurl http://$host_name:5000/v2.0 \
  --adminurl http://$host_name:35357/v2.0 \
  --region regionOne
###now that we have the admin user we do not use the token anymore. some cleanup
unset OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT
## run a small test for senity and log the results in a new file
keystone --os-tenant-name admin --os-username admin --os-password $master_pass \
  --os-auth-url http://$host_name:35357/v2.0 token-get >  kesytone_test_results
keystone --os-tenant-name admin --os-username admin --os-password $master_pass \
  --os-auth-url http://$host_name:35357/v2.0 tenant-list >> kesytone_test_results
keystone --os-tenant-name admin --os-username admin --os-password $master_pass \
  --os-auth-url http://$host_name:35357/v2.0 user-list >> kesytone_test_results
keystone --os-tenant-name admin --os-username admin --os-password $master_pass \
  --os-auth-url http://$host_name:35357/v2.0 role-list >> kesytone_test_results
### from now on we will 'source' the variables for the pythin clients to have cleaner commands
cat > admin-openrc.sh <<EOF
export OS_TENANT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=$master_pass
export OS_AUTH_URL=http://$host_name:35357/v2.0
EOF
source admin-openrc.sh
##############starting glance###############
# crates the glance user, service, endpoint etc... in the keystone catalogs
keystone user-create --name glance --pass $mastr_pass
keystone user-role-add --user glance --tenant service --role admin
keystone service-create --name glance --type image --description "OpenStack Image Service"
keystone endpoint-create \
  --service-id $(keystone service-list | awk '/ image / {print $2}') \
  --publicurl http://$host_name:9292 \
  --internalurl http://$host_name:9292 \
  --adminurl http://$host_name:9292 \
  --region regionOne
# overwrite glance config files

